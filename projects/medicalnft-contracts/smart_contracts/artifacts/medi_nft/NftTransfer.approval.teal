#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 4
    bytecblock "assetid"
    // smart_contracts/medi_nft/contract.py:5
    // class NftTransfer(ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@9
    pushbytess 0x3cf31b31 0xb6c2b148 0x4b19dfdd // method "create_application(asset)void", method "asset_opt_in(asset)void", method "asset_transfer(asset,account,uint64)void"
    txna ApplicationArgs 0
    match main_create_application_route@3 main_asset_opt_in_route@4 main_asset_transfer_route@5

main_after_if_else@9:
    // smart_contracts/medi_nft/contract.py:5
    // class NftTransfer(ARC4Contract):
    intc_0 // 0
    return

main_asset_transfer_route@5:
    // smart_contracts/medi_nft/contract.py:23
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/medi_nft/contract.py:5
    // class NftTransfer(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txna ApplicationArgs 3
    btoi
    // smart_contracts/medi_nft/contract.py:23
    // @abimethod
    callsub asset_transfer
    intc_1 // 1
    return

main_asset_opt_in_route@4:
    // smart_contracts/medi_nft/contract.py:12
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/medi_nft/contract.py:5
    // class NftTransfer(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // smart_contracts/medi_nft/contract.py:12
    // @abimethod
    callsub asset_opt_in
    intc_1 // 1
    return

main_create_application_route@3:
    // smart_contracts/medi_nft/contract.py:8
    // @abimethod(allow_actions=["NoOp"], create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/medi_nft/contract.py:5
    // class NftTransfer(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // smart_contracts/medi_nft/contract.py:8
    // @abimethod(allow_actions=["NoOp"], create="require")
    callsub create_application
    intc_1 // 1
    return


// smart_contracts.medi_nft.contract.NftTransfer.create_application(asset_id: uint64) -> void:
create_application:
    // smart_contracts/medi_nft/contract.py:8-9
    // @abimethod(allow_actions=["NoOp"], create="require")
    // def create_application(self, asset_id: Asset ) -> None:
    proto 1 0
    // smart_contracts/medi_nft/contract.py:10
    // self.assetid = asset_id.id
    bytec_0 // "assetid"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.medi_nft.contract.NftTransfer.asset_opt_in(asset: uint64) -> void:
asset_opt_in:
    // smart_contracts/medi_nft/contract.py:12-13
    // @abimethod
    // def asset_opt_in(self, asset: Asset) -> None:
    proto 1 0
    // smart_contracts/medi_nft/contract.py:14
    // assert asset.id == self.assetid
    intc_0 // 0
    bytec_0 // "assetid"
    app_global_get_ex
    assert // check self.assetid exists
    frame_dig -1
    ==
    assert
    // smart_contracts/medi_nft/contract.py:16-21
    // itxn.AssetTransfer(
    //     asset_receiver=Global.current_application_address,
    //     xfer_asset=asset,
    //     asset_amount=0,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/medi_nft/contract.py:17
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/medi_nft/contract.py:19
    // asset_amount=0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig -1
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/medi_nft/contract.py:16
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    // smart_contracts/medi_nft/contract.py:20
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/medi_nft/contract.py:16-21
    // itxn.AssetTransfer(
    //     asset_receiver=Global.current_application_address,
    //     xfer_asset=asset,
    //     asset_amount=0,
    //     fee=0,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.medi_nft.contract.NftTransfer.asset_transfer(asset: uint64, receiver: bytes, amount: uint64) -> void:
asset_transfer:
    // smart_contracts/medi_nft/contract.py:23-24
    // @abimethod
    // def asset_transfer(self, asset: Asset, receiver: Account, amount: UInt64) -> None:
    proto 3 0
    // smart_contracts/medi_nft/contract.py:25
    // assert asset.id == self.assetid
    intc_0 // 0
    bytec_0 // "assetid"
    app_global_get_ex
    assert // check self.assetid exists
    frame_dig -3
    ==
    assert
    // smart_contracts/medi_nft/contract.py:27-31
    // itxn.AssetTransfer(
    //     asset_receiver=receiver,
    //     xfer_asset=asset,
    //     asset_amount=amount
    //     ).submit()
    itxn_begin
    frame_dig -1
    itxn_field AssetAmount
    frame_dig -3
    itxn_field XferAsset
    frame_dig -2
    itxn_field AssetReceiver
    // smart_contracts/medi_nft/contract.py:27
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/medi_nft/contract.py:27-31
    // itxn.AssetTransfer(
    //     asset_receiver=receiver,
    //     xfer_asset=asset,
    //     asset_amount=amount
    //     ).submit()
    itxn_submit
    retsub
